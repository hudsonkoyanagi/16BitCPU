00000 - ADD  Rd, Rs, RT  (Add: Rd = Rs + Rt)
00001 - AND  Rd, Rs  (Bitwise AND: Rd = Rd & Rs)
00010 - OR   Rd, Rs  (Bitwise OR: Rd = Rd | Rs)
00011 - XOR  Rd, Rs  (Bitwise XOR: Rd = Rd ^ Rs)
00100 - LSL  Rd, Rs  (Logical Shift Left: Rd = Rd << Rs)
00101 - LSR  Rd, Rs  (Logical Shift Right: Rd = Rd >> Rs)
00110 - SUB  Rd, Rs  (Subtract: Rd = Rd - Rs)
00111 - NOT          (No Operation)
01000 - ADDI Rd, imm (Add Immediate: Rd = Rd + imm)
01001 - ANDI Rd, imm (Bitwise AND Immediate: Rd = Rd & imm)
01010 - ORI  Rd, imm (Bitwise OR Immediate: Rd = Rd | imm)
01011 - XORI Rd, imm (Bitwise XOR Immediate: Rd = Rd ^ imm)
01100 - LSLI Rd, imm (Logical Shift Left Immediate: Rd = Rd << imm)
01101 - LSRI Rd, imm (Logical Shift Right Immediate: Rd = Rd >> imm)
01110 - SUBI Rd, imm (Subtract Immediate: Rd = Rd - imm)
01111 - J    addr    (Jump: PC = addr)
10000 - BZ   addr    (Branch if Zero: if (Rd == 0) PC = addr)
10001 - BNZ  addr    (Branch if Not Zero: if (Rd != 0) PC = addr)
10010 - BLT  addr    (Branch if Less Than: if (Rd < 0) PC = addr)
10011 - BGT  addr
10100 - BGE  addr    (Branch if Greater or Equal: if (Rd >= 0) PC = addr)
10101 - BLE  addr 
10110 - LD   Rd, addr(Load from Memory: Rd = addr.val)
10111 - LDI  Rd, imm (Load Immediate: Rd = imm)
11000 - Str  Rs, addr(Store: addr.val = Rs)
11001 - JAL  Rd, addr (Jump and Link: Rd = PC + 1; PC = addr)
11010 - JR   Rd      (Jump Register: PC = Rd)